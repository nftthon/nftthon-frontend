import {
  FC,
  useState,
} from 'react';

import { useMetaplex } from 'hooks/useMetaplex';
import Image from 'next/image';
import { useForm } from 'react-hook-form';

import { web3 } from '@coral-xyz/anchor';
import { toMetaplexFile } from '@metaplex-foundation/js';
import {
  useConnection,
  useWallet,
} from '@solana/wallet-adapter-react';

import { APP_OWNER_PUBKEY } from '../../constants';

interface FormProps {
  prompt: string;
}

export const CreateImageWithOpenAI: FC<any> = ( { setOpenAIBuffer } ) => {
  const [imageUrl, setImageUrl] = useState("/monkey-coder.png");
  const { publicKey, sendTransaction } = useWallet();
  const { metaplex: mx } = useMetaplex();
  const wallet = useWallet();
  const { connection, } = useConnection();
  
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const onSubmit = async (submittedData: FormProps) => {
    const transaction = new web3.Transaction().add(
      web3.SystemProgram.transfer({
        fromPubkey: publicKey,
        toPubkey: new web3.PublicKey(APP_OWNER_PUBKEY),
        lamports: web3.LAMPORTS_PER_SOL / 1000,
      }),
    );

    const signature = await sendTransaction(
      transaction,
      connection
    );
    console.log('SIGNATURE: ', signature);

    console.log("prompt: ", submittedData.prompt)
    const response = await fetch(`/api/createBufferImage?prompt=${submittedData.prompt}`, {
    });
    console.log("response: ", response)
    const data = await response.json();
    setOpenAIBuffer(data.buffer);
    
    const { uri, metadata } = await mx
      .nfts()
      .uploadMetadata({
        name: "image by NFTthon",
        description: "image generated by DALL-E-2 on NFTthon",
        image: toMetaplexFile(data.buffer, "nftthon.png"),
      });
      setImageUrl(metadata.image);
  };

  if (!wallet.publicKey) {
    return (
      <div className="mx-auto">
        {/* <div className="flex flex-col md:hero-content">
          <h1 className="text-center text-2xl font-bold text-black">  
          </h1>
        </div> */}
      </div>
    );
  }

  return (
    <div className="pt-4 md:pt-6 px-6 flex flex-col items-center min-w-full">
      <form onSubmit={handleSubmit(onSubmit)} className="form-control w-full flex flex-col items-center">
        <label className="label">
          <span className="label-text text-center font-bold text-lg md:text-2xl text-d-pink">
            Key in your prompt ðŸ˜€
            </span>
        </label>
        <input
          type="text"
          name="prompt"
          id="prompt"
          className="mt-4 input input-bordered w-full h-20 text-black bg-slate-200"
          {...register("prompt", { required: true })}
        />
        {errors.name && <span>This field is required</span>}
        <div className='pt-4 md:pt-8 text-center'>
          <button
              className="bg-gradient-to-r from-d-purple to-d-pink hover:bg-pink-700 py-0 px-4 md:px-7 h-10 md:h-12 rounded-full font-bold text-xl md:text-xl text-white"
              type="submit"
            >
              Create Image!
          </button>
        </div>   
      </form>
        <div className="flex justify-center py-4 lg:py-8">
          <Image src={imageUrl} width={300} height={300} unoptimized={true} 
            className="rounded-3xl w-full h-full object-cover object-center"></Image>
        </div>
      </div>
  );
};
